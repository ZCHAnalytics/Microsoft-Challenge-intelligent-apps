## AKS deployment pipeline with GitHub Actions
Contoso Video, a video production company whose technology stack has migrated to AKS. To reduce your team's time and effort building container images and deploying applications, you want to investigate using pipelines to deploy AKS workloads.

In this module, you learn how to create a continuous integration and continuous delivery (CI/CD) pipeline that uses GitHub Actions to deploy Kubernetes workloads to an AKS cluster. You create a proof of concept by using the Contoso Video website.
In this unit, you design a CI/CD pipeline to support the needs of your project. You want the Contoso Video website to be published in Azure Kubernetes Service (AKS) after each successful push to the main branch that's tagged for release to production. The tagging design makes it easy to check the version of each deployment that goes to production.

You also want to deploy the website to a staging environment for testing after every push to the main branch, regardless of whether the push is tagged for release to production. You can use tags for routing different container images when you push them to Azure Container Registry.
Triggers
Your pipeline needs to trigger on two different events:

A tagged push to the main branch.
A nontagged push to the main branch.
You split the two events into two separate triggers, because the actions for a tagged push are different from the actions for a nontagged push. A tagged push deploys to production, while a nontagged push deploys to the staging environment. The following diagram shows the two triggers for the pipeline:

